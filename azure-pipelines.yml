# Android

# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/android

trigger:
- master
- develop
- weatherforcast_barchart_implementation

#Unless you specify pr triggers pull request builds are automatically enabled for all branches
#pr:
#- master
#- feature/*

pool:
  vmImage: 'macOS-10.14'

variables:
- group: android-build-variables
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
steps:
#- task: VersionAssemblies@2
#  inputs:
#    sourcePath: '$(Build.SourcesDirectory)/app/manifests'
#    versionCode: 1
#    versionCodeOffset: '1'
#    versionName: 'SampleWeatherForcastApp'
#    printFile: true

# Build  Android project in Debug mode with Gradle.
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    checkStyleRunAnalysis: true
    findBugsRunAnalysis: true
    pmdRunAnalysis: true
    publishJUnitResults: true
    tasks: 'assembleRelease'

- task: Cache@2
  inputs:
    key: 'gradle | "$(Agent.OS)"'
    restoreKeys: gradle
    path: $(GRADLE_USER_HOME)
    displayName: Gradle build cache

- script: |
            ./gradlew --build-cache build
  # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
            ./gradlew --stop
            displayName: Cache Gradle

- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'assembleRelease test'
  displayName: gradlew assembleRelease test



  # Build  Android project in Release mode with Gradle.
#- task: Gradle@2
#  inputs:
#    workingDirectory: ''
#    gradleWrapperFile: 'gradlew'
#    checkStyleRunAnalysis: true
#    findBugsRunAnalysis: true
#    pmdRunAnalysis: true
#    publishJUnitResults: false
#    tasks: 'assembleRelease'

## sign Android apk
  #- task: AndroidSigning@3
  #  inputs:
  #    apkFiles: '**/*.apk'
  #    apksign: true
  #    apksignerKeystoreFile: SampleWeatherKeyStore.jks
  #    apksignerKeystorePassword: $(keystore.password)
  #    apksignerKeystoreAlias: $(key.alias)
  #    apksignerKeyPassword: $(key.password)
  #    apksignerArguments: --out $(Build.SourcesDirectory)/app/build/outputs/apk/release/SampleWeatherForCastApplication.apk
  #    zipalign: true

# Copies all apk files into artifact directory
- task: CopyFiles@2
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(build.artifactStagingDirectory)'

# Publish all apk files into artifact apk-file directory
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)/app/build/outputs/'
    artifactName: 'apk-files'
    artifactType: 'container'


