# Android

# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/android

trigger:
- master
- develop
- weatherforcast_barchart_implementation

#Unless you specify pr triggers pull request builds are automatically enabled for all branches
#pr:
#- master
#- feature/*

pool:
  vmImage: 'macOS-10.14'

variables:
- group: android-build-variables

steps:
#- task: VersionAssemblies@2
#  inputs:
#    sourcePath: '$(Build.SourcesDirectory)/app/manifests'
#    versionCode: 1
#    versionCodeOffset: '1'
#    versionName: 'SampleWeatherForcastApp'
#    printFile: true

# Build  Android project in Debug mode with Gradle.
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    checkStyleRunAnalysis: true
    findBugsRunAnalysis: true
    pmdRunAnalysis: true
    publishJUnitResults: true
    tasks: 'assembleRelease'

- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'assembleRelease test'
  displayName: gradlew assembleRelease test



  # Build  Android project in Release mode with Gradle.
#- task: Gradle@2
#  inputs:
#    workingDirectory: ''
#    gradleWrapperFile: 'gradlew'
#    checkStyleRunAnalysis: true
#    findBugsRunAnalysis: true
#    pmdRunAnalysis: true
#    publishJUnitResults: false
#    tasks: 'assembleRelease'

## sign Android apk
- task: AndroidSigning@3
  inputs:
    apkFiles: '**/*.apk'
    apksign: true
    apksignerKeystoreFile: SampleWeatherKeyStore.jks
    apksignerKeystorePassword: $(keystorePassword)
    apksignerKeystoreAlias: $(keyAlias)
    apksignerKeyPassword: $(keyPassword)
    apksignerArguments: --out $(Build.SourcesDirectory)/app/build/outputs/SampleWeatherApp.apk
    zipalign: true
    displayName: App align and signing task

# Copies all apk files into artifact directory
- task: CopyFiles@2
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(build.artifactStagingDirectory)'

# Publish all apk files into artifact apk-file directory
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)/app/build/outputs/'
    artifactName: 'apk-files'
    artifactType: 'container'

  #  # Run tests using the App Center CLI
  ##- script: appcenter test run espresso --app "{APP_CENTER_SLUG}" --devices "{DEVICE}" --app-path {APP_FILE} --test-series "master" --locale "en_US" --build-dir {PAT_ESPRESSO} --debug
  #
  #  # Distribute the app
  #- task: AppCenterDistribute@3
  #  inputs:
  #    serverEndpoint: 'AppCenter'
  #    appSlug: '$(APP_CENTER_SLUG)'
  #    appFile: '$(APP_FILE)' # Relative path from the repo root to the APK or IPA file you want to publish
  #    symbolsOption: 'Android'
  #    releaseNotesOption: 'input'
  #    releaseNotesInput: 'Here are the release notes for this version.'
  #    destinationType: 'groups'

- task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
  displayName: 'Prepare analysis on SonarQube'
  inputs:
    SonarQube: 'SonarCloud'
    projectKey: 'SampleWeatherForcast'
    projectName: SampleWeatherForcast
    projectVersion: 'assembleRelease'
    extraProperties: |
      sonar.organization=naveenbangar27
      sonar.branch.name=weatherforcast_barchart_implementation