# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/android

trigger:
  - master
  - develop
  - weatherforcast_barchart_implementation

#Unless you specify pr triggers pull request builds are automatically enabled for all branches
pr:
  - develop
  - weatherforcast_barchart_implementation

pool:
  vmImage: 'macOS-latest'

variables:
  - group: android-build-variables

steps:
  #  - task: SonarCloudPrepare@1
  #    inputs:
  #      SonarCloud: 'SonarCloud'
  #      organization: 'naveenbangar27'
  #      scannerMode: 'Other'
  #      extraProperties: |
  #          sonar.exclusions=**/*.bin
  #          sonar.projectName=SampleWeatherForcast
  #          sonar.projectKey=SampleWeatherForcast
  #          sonar.coverage.jacoco.xmlReportPaths=CCReport43F6D5EF/summary.xml

  # Build Task- Android project build with Gradle.
  - task: Gradle@2
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      checkStyleRunAnalysis: true
      findBugsRunAnalysis: true
      pmdRunAnalysis: true
      publishJUnitResults: true
      tasks: 'assembleDebug assembleDebugAndroidTest assembleRelease test'

  #  - task: SonarCloudPublish@1
  #    inputs:
  #      pollingTimeoutSec: '300'

  # Build  Android project in Release mode with Gradle.
  #- task: Gradle@2
  #  inputs:
  #    workingDirectory: ''
  #    gradleWrapperFile: 'gradlew'
  #    checkStyleRunAnalysis: true
  #    findBugsRunAnalysis: true
  #    pmdRunAnalysis: true
  #    publishJUnitResults: false
  #    tasks: 'assembleRelease'

  ## sign Android apk
  - task: AndroidSigning@3
    inputs:
      apkFiles: '**/*.apk'
      zipalign: false
      apksign: true
      apksignerKeystoreFile: SampleWeatherKeyStore.jks
      apksignerKeystorePassword: $(keystorePassword)
      apksignerKeystoreAlias: $(keyAlias)
      apksignerKeyPassword: $(keyPassword)
      apksignerArguments: --out $(Build.SourcesDirectory)/app/build/outputs/SampleWeatherApp.apk
    displayName: App align and signing task

  - task: CacheBeta@0
    displayName: 'Caching System Images for AVD'
    inputs:
      key: 'AVD_IMAGES_PIXEL_29'
      path: '$(ANDROID_HOME)/system-images'
      cacheHitVar: 'AVD_IMAGES_RESTORED'
    continueOnError: true
    condition: succeededOrFailed()
      
  - bash: |
     echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;default;x86_64'
    displayName: 'Download and install emulator image'
    condition: ne(variables.AVD_IMAGES_RESTORED, 'true')
     
  - bash: |
      echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n android_emulator -k 'system-images;android-27;default;x86_64' -d 17 --force
      echo "Emulator created successfully $ANDROID_HOME/tools/emulator -list-avds, launching it" 
      nohup $ANDROID_HOME/tools/emulator -avd android_emulator -skin 1080x1920 -no-snapshot -no-audio -no-boot-anim -accel auto -gpu auto -qemu -lcd-density 420 > /dev/null 2>&1 &
      $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done'
      $ANDROID_HOME/platform-tools/adb devices
      echo "Emulator started"

  - bash: |
      ./gradlew assembleDebugAndroidTest --console=plain  --stacktrace
      ./gradlew --stop
       displayName: 'Run Instrumented Tests'
       continueOnError: true

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFiles: '**/outputs/androidTest-results/**/TEST*.xml'
      failTaskOnFailedTests: true
      testRunTitle: 'Test results'
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFiles: '**/outputs/androidTest-results/**/TEST*.xml'
      failTaskOnFailedTests: true
      testRunTitle: 'Test results'
    condition: succeededOrFailed()

  # Copies all apk files into artifact directory
  - task: CopyFiles@2
    inputs:
      contents: '**/*.apk'
      targetFolder: '$(build.artifactStagingDirectory)'

  # Publish all apk files into artifact apk-file directory
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(build.artifactStagingDirectory)/app/build/outputs/'
      artifactName: 'apk-files'
      artifactType: 'container'

  #  - task: AppCenterTest@1
  #    inputs:
  #      appFile: 'app/build/outputs/apk/debug/app-debug.apk'
  #      artifactsDirectory: '$(Build.ArtifactStagingDirectory)/AppCenterTest'
  #      espressoBuildDir: 'app/build/outputs/apk/androidTest/debug'
  #      frameworkOption: 'espresso'
  #      credentialsOption: 'serviceEndpoint'
  #      serverEndpoint: 'SampleWeatherForcastApplicationAppCenter'
  #      appSlug: 'naveen.bangar27-gmail.com/SampleWeatherApp'
  #      devices: 'naveen.bangar27-gmail.com/MotoOneVision'
  #      localeOption: 'en_US'
  #      showDebugOutput: true

  #Distribute the app on App center
  - task: AppCenterDistribute@3
    inputs:
      serverEndpoint: 'SampleWeatherForcastApplicationAppCenter'
      appSlug: 'naveen.bangar27-gmail.com/SampleWeatherApp'
      appFile: '$(Build.SourcesDirectory)/app/build/outputs/SampleWeatherApp.apk' # Relative path from the repo root to the APK or IPA file you want to publish
      symbolsOption: 'Android'
      releaseNotesOption: 'input'
      releaseNotesInput: 'SampleWeatherApp First version.'
      destinationType: 'groups'
      destinationGroupIds: '6c2f931d-d656-4190-b475-0f9f7fcf9da2'


#- task: SonarQubePrepare@4
#  inputs:
#    SonarQube: 'SampleWeatherAppSonar'
#    projectKey: 'SampleWeatherForcast'
#    projectName: 'SampleWeatherForcast'
#    projectVersion: 'assembleRelease'
#    displayName: 'Prepare analysis on SonarQube'
#    extraProperties: |
#      sonar.organization=naveenbangar27
#      sonar.branch.name=weatherforcast_barchart_implementation